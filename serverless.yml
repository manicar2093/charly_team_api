# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: charly-team-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 2

provider:
  name: aws
  runtime: go1.x
  lambdaHashingVersion: 20201221
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminCreateUser"
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:cognito-idp"
            - Ref: "AWS::Region"
            - Ref: "AWS::AccountId"
            - "userpool/*"

# you can define service wide environment variables here
  environment:
    DB_HOST: ${ssm:/charly_api_dev/db_settings/host}
    DB_PORT: ${ssm:/charly_api_dev/db_settings/port}
    DB_NAME: ${ssm:/charly_api_dev/db_settings/name}
    DB_USER: ${ssm:/charly_api_dev/db_settings/user}
    DB_PASSWORD: ${ssm:/charly_api_dev/db_settings/password}
    COGNITO_POOL_ID: !Ref CharlyTeamAppUserPool

package:
  patterns:
    - ./bin/**

functions:
  create_new_biotest:
    handler: bin/create_new_biotest

  get_biotest_by_filter:
    handler: bin/get_biotest_by_filter

  get_catalogs:
    handler: bin/get_catalogs

  get_user_by_filter:
    handler: bin/get_user_by_filter

  registry_new_user:
    handler: bin/registry_new_user
  
  update_biotest:
    handler: bin/update_biotest

  update_user: 
    handler: bin/update_user

  cognito_token_gen:
    handler: bin/cognito_token_gen
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: PreTokenGeneration

# you can add CloudFormation resource templates here
resources:
  Resources:

    CharlyTeamAppUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: charly-team-app-dev-user-pool
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          InviteMessageTemplate:
            EmailMessage: ¡Ingresa a CharlyApp con tu usuario {username} y esta contraseña temporal {####} para continuar con tu plan! 
            EmailSubject: "¡Bienvenido a #CharlyTeam!"
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        UsernameAttributes: 
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
              MinimumLength: 8
              RequireLowercase: true
              RequireNumbers: true
              RequireSymbols: true
              RequireUppercase: true
              TemporaryPasswordValidityDays: 14

    CharlyTeamAppUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: charly-team-app-dev-user-pool-client
        ExplicitAuthFlows: 
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        UserPoolId: !Ref CharlyTeamAppUserPool 

    CharlyTeamBiotestImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: charly-team-api-dev-biotest-images-bucket

  Outputs:
    UserPoolClientId:
      Value: !Ref CharlyTeamAppUserPoolClient
      Export:
        Name: UserPoolClientID

