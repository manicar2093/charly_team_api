// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	paginator "github.com/manicar2093/charly_team_api/db/paginator"
	mock "github.com/stretchr/testify/mock"

	rel "github.com/go-rel/rel"
)

// Paginable is an autogenerated mock type for the Paginable type
type Paginable struct {
	mock.Mock
}

// CreatePagination provides a mock function with given fields: ctx, tableName, holder, pageSort
func (_m *Paginable) CreatePagination(ctx context.Context, tableName string, holder interface{}, pageSort *paginator.PageSort) (*paginator.Paginator, error) {
	ret := _m.Called(ctx, tableName, holder, pageSort)

	var r0 *paginator.Paginator
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *paginator.PageSort) *paginator.Paginator); ok {
		r0 = rf(ctx, tableName, holder, pageSort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paginator.Paginator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, *paginator.PageSort) error); ok {
		r1 = rf(ctx, tableName, holder, pageSort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePaginator provides a mock function with given fields: ctx, tableName, holder, pageNumber, queries
func (_m *Paginable) CreatePaginator(ctx context.Context, tableName string, holder interface{}, pageNumber int, queries ...rel.Querier) (*paginator.Paginator, error) {
	_va := make([]interface{}, len(queries))
	for _i := range queries {
		_va[_i] = queries[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tableName, holder, pageNumber)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *paginator.Paginator
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, int, ...rel.Querier) *paginator.Paginator); ok {
		r0 = rf(ctx, tableName, holder, pageNumber, queries...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paginator.Paginator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, int, ...rel.Querier) error); ok {
		r1 = rf(ctx, tableName, holder, pageNumber, queries...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
