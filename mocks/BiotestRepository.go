// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/health_records/internal/db/entities"
	mock "github.com/stretchr/testify/mock"

	paginator "github.com/manicar2093/health_records/internal/db/paginator"

	repositories "github.com/manicar2093/health_records/internal/db/repositories"
)

// BiotestRepository is an autogenerated mock type for the BiotestRepository type
type BiotestRepository struct {
	mock.Mock
}

// FindBiotestByUUID provides a mock function with given fields: ctx, biotestUUID
func (_m *BiotestRepository) FindBiotestByUUID(ctx context.Context, biotestUUID string) (*entities.Biotest, error) {
	ret := _m.Called(ctx, biotestUUID)

	var r0 *entities.Biotest
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Biotest); ok {
		r0 = rf(ctx, biotestUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Biotest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, biotestUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUserBiotestByUserUUID provides a mock function with given fields: ctx, pageSort, userUUID
func (_m *BiotestRepository) GetAllUserBiotestByUserUUID(ctx context.Context, pageSort *paginator.PageSort, userUUID string) (*paginator.Paginator, error) {
	ret := _m.Called(ctx, pageSort, userUUID)

	var r0 *paginator.Paginator
	if rf, ok := ret.Get(0).(func(context.Context, *paginator.PageSort, string) *paginator.Paginator); ok {
		r0 = rf(ctx, pageSort, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paginator.Paginator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paginator.PageSort, string) error); ok {
		r1 = rf(ctx, pageSort, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUserBiotestByUserUUIDAsCatalog provides a mock function with given fields: ctx, pageSort, userUUID
func (_m *BiotestRepository) GetAllUserBiotestByUserUUIDAsCatalog(ctx context.Context, pageSort *paginator.PageSort, userUUID string) (*paginator.Paginator, error) {
	ret := _m.Called(ctx, pageSort, userUUID)

	var r0 *paginator.Paginator
	if rf, ok := ret.Get(0).(func(context.Context, *paginator.PageSort, string) *paginator.Paginator); ok {
		r0 = rf(ctx, pageSort, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paginator.Paginator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paginator.PageSort, string) error); ok {
		r1 = rf(ctx, pageSort, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComparitionDataByUserUUID provides a mock function with given fields: ctx, userUUID
func (_m *BiotestRepository) GetComparitionDataByUserUUID(ctx context.Context, userUUID string) (*repositories.BiotestComparisionResponse, error) {
	ret := _m.Called(ctx, userUUID)

	var r0 *repositories.BiotestComparisionResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *repositories.BiotestComparisionResponse); ok {
		r0 = rf(ctx, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.BiotestComparisionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBiotest provides a mock function with given fields: ctx, biotest
func (_m *BiotestRepository) SaveBiotest(ctx context.Context, biotest *entities.Biotest) error {
	ret := _m.Called(ctx, biotest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Biotest) error); ok {
		r0 = rf(ctx, biotest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBiotest provides a mock function with given fields: ctx, biotest
func (_m *BiotestRepository) UpdateBiotest(ctx context.Context, biotest *entities.Biotest) error {
	ret := _m.Called(ctx, biotest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Biotest) error); ok {
		r0 = rf(ctx, biotest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
